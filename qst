#!/usr/bin/bash

# Function to display usage
usage() {
  echo "Usage: $0 <status> [-n <number_of_jobs>] [search_string]"
  echo "status: 'r' for running, 'q' for queued jobs or 'f' for finished jobs (mandatory)"
  echo "-n <number_of_jobs>: optional, the number of jobs to display (default: 20)"
  echo "[search_string]: optional, a string to search for in the job details"
  exit 1
}

# Check if the first argument (status) is provided
if [ -z "$1" ]; then
  usage
fi

# Convert lowercase status to uppercase and assign to STATUS variable
STATUS=$(echo "$1" | tr '[:lower:]' '[:upper:]')

# Shift to the next argument
shift

# Default value for the number of jobs
NUM_JOBS=20

while getopts ":n:c:" opt; do
  case $opt in
    n)
      NUM_JOBS="$OPTARG"
      ;;
    c)
      CLUSTER="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      ;;
  esac
done

# Shift to the next argument after the options
shift $((OPTIND - 1))

# Process --cluster if present
while [ $# -gt 0 ]; do
  case "$1" in
    --cluster)
      CLUSTER="$2"
      shift 2
      ;;
    *)
      shift
      ;;
  esac
done


# Assign the remaining argument (if any) to SEARCH_STRING
SEARCH_STRING="${1:-}"

# Fetch JSON data and process it with jq
qsjs $CLUSTER | jq --arg status "$STATUS" --argjson num_jobs "$NUM_JOBS" --arg search_string "$SEARCH_STRING" '
  .jobs |
  map(select(
    .status == $status and 
    .owner == "vport@ufsc" and (
      ($search_string == "" or (
        (.id // "" | test($search_string; "i")) or
        (.name // "" | test($search_string; "i")) or
        (.pwd // "" | test($search_string; "i")) or
        (.node // "" | test($search_string; "i")) or
        (.queue // "" | test($search_string; "i")) or
        (.walltime // "" | test($search_string; "i"))
      ))
    )
  )) |
  reverse |
  .[:$num_jobs] |
  reverse
'
