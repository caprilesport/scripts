#!/bin/bash

# Enable colors in Bash
RED="\e[31m"
ENDCOLOR="\e[0m"
GREEN="\e[32m"
BLUE="\e[34m"

# Function to display help message
function display_help {
    echo -e ""
    echo -e "           Welcome to ${BLUE}<GE|ÃŠ|MM>${ENDCOLOR}!!"
    echo -e ""
    echo -e "Script for submitting jobs to the Orca software."
    echo -e "The walltime default is 60 h."
    echo -e ""
    echo -e "Usage:"
    echo -e "qorca basename.inp"
    echo -e "qorca [-t ${GREEN}hours${ENDCOLOR}] basename.inp"
    echo -e ""
    echo -e "Options:"
    echo -e "-t, --timejob ${GREEN}hours${ENDCOLOR}   Set the walltime in hours (default: 36)."
    echo -e "-h, --help                Display this help message."
    echo -e ""
    exit 0
}

# Default values
timejob="60"
orca_path="/home/users/vport/bin/orca_6_0_1/"

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -t|--timejob) timejob="$2"; shift ;;
        -h|--help) display_help ;;
        *) input_file="$1" ;;
    esac
    shift
done

# Validate input file
if [[ -z "$input_file" || ! -f "$input_file" ]]; then
    echo -e "${RED}ERROR:${ENDCOLOR} Input file not found or not specified, exiting..."
    exit 2
fi

# Set variable to remove the .inp
job=${input_file%.*}

# Get the number of processors
if grep -qEi '^!.*PAL[0-9]+' "$input_file"; then
    nprocs=$(grep -Eoi 'PAL[0-9]+' "$input_file" | grep -Eo '[0-9]+')
    nodes=$nprocs
elif grep -qEi 'nprocs[ ]*[0-9]+' "$input_file"; then
    nprocs=$(grep -Eoi 'nprocs[ ]*[0-9]+' "$input_file" | grep -Eo '[0-9]+')
    nodes=$nprocs
else
    echo -e "${RED}ERROR:${ENDCOLOR} Please specify the number of procs in your input."
    echo -e "This can be done with the following block:"
    echo -e "${GREEN}%pal"
    echo -e "  nprocs X"
    echo -e "end${ENDCOLOR}"
    echo -e "Exiting..."
    exit 2
fi

# Checking the allocated resources
echo -e "${GREEN}Total procs allocated:${ENDCOLOR} $nodes"
echo -e "${GREEN}Total walltime allocated:${ENDCOLOR} $timejob:00:00"

# Create a job script for the PBS scheduler
cat > "$job.job" <<EOF
#!/bin/bash
#PBS -l select=1:ncpus=${nodes}:mpiprocs=${nodes}
#PBS -l walltime=${timejob}:00:00
#PBS -V

module load gcc/11.2.0
module load openmpi-gnu/4.1.1

JOB_ID=\${PBS_JOBID%.*}

# Log the job start details
echo "start of job:" \`date\` > \${PBS_O_WORKDIR}/${job}.job.\${JOB_ID}
echo "Job started from \${PBS_O_HOST}, running on \$(hostname) in \${PBS_O_WORKDIR} " >> \${PBS_O_WORKDIR}/${job}.job.\${JOB_ID}

# Run the Orca job
${orca_path}orca \$PBS_O_WORKDIR/$job.inp > \$PBS_O_WORKDIR/$job.out || true

echo "final of job:" \`date\` >> \${PBS_O_WORKDIR}/${job}.job.\${JOB_ID}
EOF
