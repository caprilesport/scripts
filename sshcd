#!/usr/bin/env bash

usage() {
  echo "Usage: $0 [cluster] [optional: directory]"
  echo
  echo "Arguments:"
  echo "  cluster   The remote server to navigate to: newton, jupiter, or pipeline."
  echo "  directory (optional)   Specify a directory to navigate to. If omitted, defaults to the current directory if itâ€™s a project subfolder."
  echo
  echo "Options:"
  echo "  -h, --help    Show this help message."
  exit 1
}

if [[ $(hostname) == "trindatimes" ]]; then
  personal="pipeline"
else
  personal="trindatimes"
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    loboc|jupiter|$personal)
      cluster="$1"
      case "$cluster" in
        loboc)
          remote_dir=$LOBOC_PROJECTS
          remote_shell="bash"
          ;;
        jupiter)
          remote_dir=$JUPITER_PROJECTS
          remote_shell="bash"
          ;;
        $personal)
          remote_dir=$LOCAL_PROJECTS
          remote_shell="fish"
          ;;
        *)
          echo "ERROR: Invalid cluster '$1'. Must be 'newton', 'jupiter', or '$personal'."
          usage
          ;;
      esac
      shift
      ;;
    *)
      target_dir="$1"
      shift
      ;;
  esac
done

# Validate cluster selection
if [[ -z "$cluster" ]]; then
  echo "ERROR: Missing required cluster argument."
  usage
fi

# Function to check if the directory is a subfolder of the project
check_local_subfolder() {
  CURRENT_DIR=$(pwd)'/'
  if [[ "$CURRENT_DIR" == "$LOCAL_PROJECTS"* ]]; then
    len_local=${#LOCAL_PROJECTS}
    len_current=${#CURRENT_DIR}
    target="$remote_dir${CURRENT_DIR:$len_local:$len_current}"
  else
    echo "ERROR: Current directory is NOT a subfolder of the $cluster projects."
    exit 1
  fi
}

# Handle target directory
if [[ -z "$target_dir" ]]; then
  # Default to checking if current directory is a subfolder
  check_local_subfolder
else
  # Use provided directory as target
  target="$target_dir"
fi

# Construct and run SSH command
ssh_command="ssh -t $cluster \"if [[ -d $target ]]; then cd $target && $remote_shell --login -i; else echo 'ERROR: Directory does not exist on remote.'; fi\""
eval "$ssh_command"
