#!/home/vport/projects/scripts/.venv/bin/python
import os
import argparse

from InquirerPy import inquirer
from glob import glob

from rich.table import Table
from rich.console import Console

DEFAULT_REAGENT="./react-freq/init.out"
DEFAULT_TS="./optts/init.out"
DEFAULT_PRODUCT="./prod-freq/init.out"


def parse_arguments():
    """
    Parses command-line arguments for a script that processes ORCA log files to calculate
    reaction barriers.

    Returns:
        argparse.Namespace: Parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description="This script processes ORCA log files to calculate reaction barriers."
    )

    parser.add_argument(
        "-d", "--default",
        action="store_true",
        help="Enable the default behavior for parsing ORCA logs."
    )

    parser.add_argument(
        "-x", "--xtb",
        action="store_true",
        help="Use a single point hessian to correct thermodynamics."
    )

    return parser.parse_args()

def is_orca_log(file: str):
    """
    Check if a file is an orca based on it's header

    Returns: bool
    """
    with open(file, "r") as f:
        orca = f.readlines()
        if orca[2].replace(" ", "").rstrip() == "*ORCA*":
            return True
        else:
            return False
        
def get_files(extension_glob='*.out'):
    """
    Walks the current directory recursively, obtaining all the .out files

    Returns:
        [path with all the files that match the extension glob].
    """
    return [y for x in os.walk(".") for y in glob(os.path.join(x[0], extension_glob))]

def parse_orca_gibbs(file):
    """
    Retrieves all possible data about the logfile we're opening.
    Currently only supports one logfile per parsing cicle.
    """
    with open(file, "r") as f:
        lines = f.readlines()

    gibbsenergy = None

    for idx in range(0, len(lines)):
        # -------------------
        # GIBBS FREE ENERGY
        # -------------------

        # The Gibbs free energy is G = H - T*S

        # Total enthalpy                    ... -12459.92150082 Eh
        # Total entropy correction          ...     -0.11745335 Eh    -73.70 kcal/mol
        # -----------------------------------------------------------------------
        # Final Gibbs free energy         ... -12460.03895416 Eh

        # For completeness - the Gibbs free energy minus the electronic energy
        # G-E(el)                           ...      0.21787284 Eh    136.72 kcal/mol

        if "Final Gibbs free energy" in lines[idx]:
            gibbsenergy = float(lines[idx].strip().split()[-2])

    if gibbsenergy is not None:
        return gibbsenergy
    else:
        print("File {} did not have a Gibbs energy line".format(file))
        raise SystemExit

def parse_orca_electronic_energy(file):
    "Retrieve the electronic energy from an ORCA calculation"
    with open(file, "r") as f:
        lines = f.readlines()

    for idx in range(0, len(lines)):
        # -------------------------   --------------------
        # FINAL SINGLE POINT ENERGY     -2771.268185149811
        # -------------------------   --------------------
        if "FINAL SINGLE POINT ENERGY" in lines[idx]:
            electronic_energy = float(lines[idx].strip().split()[-1])

    if electronic_energy is not None:
        return electronic_energy
    else:
        print("Couldn't find single point energy in the orca file {}".format(file))
        raise SystemExit



def parse_sph_gibbs(file):
    """
    Retrieves the gibbs free energy correction from a single point hessian calculation
    It assumes `file` is of type `file_name.out` and that the sph calculation is stored in a
    `file_name.sph` file
    """

    file = "." + file.split(".")[1] + ".sph"

    with open(file, "r") as f:
        lines = f.readlines()

    for idx in range(0, len(lines)):
         # :::::::::::::::::::::::::::::::::::::::::::::::::::::
         # ::                  THERMODYNAMIC                  ::
         # :::::::::::::::::::::::::::::::::::::::::::::::::::::
         # :: total free energy        -104.081062210216 Eh   ::
         # ::.................................................::
         # :: total energy             -104.457876094489 Eh   ::
         # :: zero point energy           0.442765209983 Eh   ::
         # :: G(RRHO) w/o ZPVE           -0.065951325709 Eh   ::
         # :: G(RRHO) contrib.            0.376813884274 Eh   ::
         # :::::::::::::::::::::::::::::::::::::::::::::::::::::

        if "G(RRHO) contrib." in lines[idx]:
             gibbsenergy = float(lines[idx].strip().split()[-3])

    if gibbsenergy is not None:
        return gibbsenergy
    else:
        print("Couldn't parse gibbs free energy from the single point hessin file {}".format(file))
        raise SystemExit

    

def select_logs(orca_logs):
    """
    Select reagent, TS and product files from a list of logs.

    Returns:
        [reagent, ts, product].
    """
    reagent = inquirer.select(
        message="Select reagent log",
        choices=orca_logs,
        multiselect=False,
    ).execute()

    orca_logs.remove(reagent)

    transition_state = inquirer.select(
        message="Select TS log",
        choices=orca_logs,
        multiselect=False,
    ).execute()

    orca_logs.remove(transition_state)

    product = inquirer.select(
        message="Select product log",
        choices=orca_logs,
        multiselect=False,
    ).execute()

    return [reagent, transition_state, product]


def main():
    args = parse_arguments()
    if args.default:
        reagent = DEFAULT_REAGENT
        transition_state = DEFAULT_TS
        product = DEFAULT_PRODUCT
    else:
        reagent, transition_state, product = select_logs([file for file in get_files() if is_orca_log(file)])

    if args.xtb:
        energies = [parse_orca_electronic_energy(log) + parse_sph_gibbs(log) for log in [reagent,  transition_state, product]]
        table = Table(title="Relative energies with SPH from xtb")
    else:
        energies = [parse_orca_gibbs(log) + parse_orca_gibbs(log) for log in [reagent, transition_state, product]]
        table = Table(title="Relative energies")

    rel_energies = [(v - energies[0]) * 627.15 for v in energies]
    

    table.add_column()
    table.add_column("Energy (kcal mol-1)")

    table.add_row("Transition State", "{}".format(rel_energies[1]))
    table.add_row("Product", "{}".format(rel_energies[2]))

    table.add_row("Forward barrier", "{}".format(rel_energies[1]))
    table.add_row("Backwards barrier", "{}".format(rel_energies[1] - rel_energies[2]))

    console = Console()
    console.print(table)

if __name__ == "__main__":
    main()
